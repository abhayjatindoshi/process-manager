class Process{constructor(e,t){if(this._={},e instanceof Function)this._.promise=new Promise(e);else{if(!(e instanceof Promise))throw new TypeError("Invalid invoker passed for Process constructor");this._.promise=e}this._.component=function(){var e=document.createElement("div"),s=document.createElement("span");s.setAttribute("uk-spinner","ratio: .7"),e.appendChild(s);var n=document.createElement("span");return t&&(n.innerText=" "+t),e.appendChild(n),{success:function(){s.removeAttribute("uk-spinner"),s.classList.remove("uk-spinner"),s.setAttribute("uk-icon","icon: check"),e.classList.add("uk-text-success")},failure:function(){s.removeAttribute("uk-spinner"),s.classList.remove("uk-spinner"),s.setAttribute("uk-icon","icon: close"),e.classList.add("uk-text-danger")},updateTitle:function(e){n.innerText=" "+e},getElement:function(){return e}}}();var s=this._;this._.status=ProcessStatus.INPROGRESS,this._.promise.then(function(){s.status=ProcessStatus.SUCCESS,s.component.success()},function(){s.status=ProcessStatus.FAILED,s.component.failure()})}updateTitle(e){this._.component.updateTitle(e)}then(e,t){this._.promise.then(e,t)}catch(e){this._.promise.catch(e)}appendToElement(e){e.appendChild(this._.component.getElement())}getStatus(){return this._.status}}class ProcessQueue{constructor(e){this._={},this._.component=function(){var t=document.createElement("div"),s=document.createElement("div");t.appendChild(s);var n=document.createElement("span");n.setAttribute("uk-spinner","ratio: .7"),s.appendChild(n);var i=document.createElement("span");e&&(i.innerText=" "+e),s.appendChild(i);var o=document.createElement("div");return o.classList.add("uk-margin-medium-left"),t.appendChild(o),{success:function(){n.removeAttribute("uk-spinner"),n.classList.remove("uk-spinner"),n.setAttribute("uk-icon","icon: check"),s.classList.add("uk-text-success")},failure:function(){n.removeAttribute("uk-spinner"),n.classList.remove("uk-spinner"),n.setAttribute("uk-icon","icon: close"),s.classList.add("uk-text-danger")},updateTitle:function(){i.innerText=" "+e},getProcessElement:function(){return o},getElement:function(){return t}}}();var t,s,n,i,o,r,c,u,a,p=this._;this._.status=ProcessStatus.INPROGRESS,this._.promise=(n=new Promise(function(e,n){t=e,s=n}),{get:function(){return n},resolve:function(){t.apply(void 0,arguments)},reject:function(){s.apply(void 0,arguments)}}),this._.processList=(i=[],o=0,r=0,c=p,u=function(){0,++o==i.length&&(0==r?(c.status=ProcessStatus.SUCCESS,c.component.success(),c.promise.resolve()):(c.status=ProcessStatus.FAILED,c.component.failure(),c.promise.reject()))},a=function(){r++,++o==i.length&&(c.status=ProcessStatus.FAILED,c.component.failure(),c.promise.reject())},{push:function(e){if(!(e instanceof Process||e instanceof ProcessQueue))throw new TypeError("Invalid process type pushed to the queue");e.then(u,a),i.push(e),e.appendToElement(c.component.getProcessElement())}})}appendToElement(e){e.appendChild(this._.component.getElement())}push(e){this._.processList.push(e)}updateTitle(e){this._.component.updateTitle(e)}then(e,t){this._.promise.get().then(e,t)}catch(e){this._.promise.get().catch(e)}getStatus(){return this._.status}}ProcessStatus=Object.freeze({INPROGRESS:"INPROGRESS",SUCCESS:"SUCCESS",FAILED:"FAILED"});